#!/usr/bin/env ruby
# frozen_string_literal: true

require "git"
require "dorian/arguments"

parsed = Dorian::Arguments.parse(version: { alias: :v }, help: { alias: :h })

abort parsed.help if parsed.options.help

if parsed.options.version
  abort File.read(File.expand_path("../../VERSION", __FILE__))
end

SPACE = "    "
RIGHT = "└── "
DOWN = "│   "
DOWN_AND_RIGHT = "├── "

def git_ls_files(path)
  Git.open(".").ls_files(path).map(&:first)
end

def group(files)
  files
    .group_by { |file| file.split("/").first }
    .transform_values do |values|
      group(
        values.map { |value| value.split("/")[1..].join("/") }.reject(&:empty?)
      )
    end
end

def print(key:, values:, index: 0, size: 1, prefix: "")
  key = "#{key}/" if values.any?
  last = index + 1 == size
  right_prefix = last ? RIGHT : DOWN_AND_RIGHT
  puts prefix + right_prefix + key
  values.each.with_index do |(value_key, value_values), value_index|
    print(
      key: value_key,
      values: value_values,
      index: value_index,
      size: values.size,
      prefix: prefix + (last ? SPACE : DOWN)
    )
  end
end

keys = parsed.arguments.any? ? parsed.arguments : ["."]
keys.each do |key|
  files =
    git_ls_files(key).map do |file|
      parsed.arguments.any? ? file.sub(key, "") : file
    end
  values = group(files)
  key = "#{key}/" if values.any? && key != "." && key[-1] != "/"
  puts key
  values.each.with_index do |(value_key, value_values), value_index|
    print(
      key: value_key,
      values: value_values,
      index: value_index,
      size: values.size
    )
  end
end
